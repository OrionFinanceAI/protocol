/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OrionConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVault"
      | "fhePublicCID"
      | "getFhePublicCID"
      | "getWhitelistedVaultAt"
      | "internalStateOrchestrator"
      | "isWhitelisted"
      | "liquidityOrchestrator"
      | "owner"
      | "removeVault"
      | "setProtocolParams"
      | "transferOwnership"
      | "underlyingAsset"
      | "updateFhePublicCID"
      | "whitelistCount"
      | "whitelistedVaults"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProtocolParamsUpdated"
      | "PublicCIDUpdated"
      | "VaultAdded"
      | "VaultRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fhePublicCID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFhePublicCID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedVaultAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "internalStateOrchestrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityOrchestrator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolParams",
    values: [AddressLike, AddressLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFhePublicCID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedVaults",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fhePublicCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFhePublicCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedVaultAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalStateOrchestrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityOrchestrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFhePublicCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedVaults",
    data: BytesLike
  ): Result;
}

export namespace ProtocolParamsUpdatedEvent {
  export type InputTuple = [
    underlyingAsset: AddressLike,
    internalStateOrchestrator: AddressLike,
    liquidityOrchestrator: AddressLike,
    fhePublicCID: string
  ];
  export type OutputTuple = [
    underlyingAsset: string,
    internalStateOrchestrator: string,
    liquidityOrchestrator: string,
    fhePublicCID: string
  ];
  export interface OutputObject {
    underlyingAsset: string;
    internalStateOrchestrator: string;
    liquidityOrchestrator: string;
    fhePublicCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicCIDUpdatedEvent {
  export type InputTuple = [newCID: string];
  export type OutputTuple = [newCID: string];
  export interface OutputObject {
    newCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAddedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRemovedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrionConfig extends BaseContract {
  connect(runner?: ContractRunner | null): OrionConfig;
  waitForDeployment(): Promise<this>;

  interface: OrionConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVault: TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;

  fhePublicCID: TypedContractMethod<[], [string], "view">;

  getFhePublicCID: TypedContractMethod<[], [string], "view">;

  getWhitelistedVaultAt: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  internalStateOrchestrator: TypedContractMethod<[], [string], "view">;

  isWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  liquidityOrchestrator: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeVault: TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;

  setProtocolParams: TypedContractMethod<
    [
      _underlyingAsset: AddressLike,
      _internalStateOrchestrator: AddressLike,
      _liquidityOrchestrator: AddressLike,
      _fhePublicCID: string
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  underlyingAsset: TypedContractMethod<[], [string], "view">;

  updateFhePublicCID: TypedContractMethod<
    [newCID: string],
    [void],
    "nonpayable"
  >;

  whitelistCount: TypedContractMethod<[], [bigint], "view">;

  whitelistedVaults: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVault"
  ): TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fhePublicCID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFhePublicCID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedVaultAt"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "internalStateOrchestrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityOrchestrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeVault"
  ): TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolParams"
  ): TypedContractMethod<
    [
      _underlyingAsset: AddressLike,
      _internalStateOrchestrator: AddressLike,
      _liquidityOrchestrator: AddressLike,
      _fhePublicCID: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underlyingAsset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateFhePublicCID"
  ): TypedContractMethod<[newCID: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistedVaults"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "ProtocolParamsUpdated"
  ): TypedContractEvent<
    ProtocolParamsUpdatedEvent.InputTuple,
    ProtocolParamsUpdatedEvent.OutputTuple,
    ProtocolParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PublicCIDUpdated"
  ): TypedContractEvent<
    PublicCIDUpdatedEvent.InputTuple,
    PublicCIDUpdatedEvent.OutputTuple,
    PublicCIDUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultAdded"
  ): TypedContractEvent<
    VaultAddedEvent.InputTuple,
    VaultAddedEvent.OutputTuple,
    VaultAddedEvent.OutputObject
  >;
  getEvent(
    key: "VaultRemoved"
  ): TypedContractEvent<
    VaultRemovedEvent.InputTuple,
    VaultRemovedEvent.OutputTuple,
    VaultRemovedEvent.OutputObject
  >;

  filters: {
    "ProtocolParamsUpdated(address,address,address,string)": TypedContractEvent<
      ProtocolParamsUpdatedEvent.InputTuple,
      ProtocolParamsUpdatedEvent.OutputTuple,
      ProtocolParamsUpdatedEvent.OutputObject
    >;
    ProtocolParamsUpdated: TypedContractEvent<
      ProtocolParamsUpdatedEvent.InputTuple,
      ProtocolParamsUpdatedEvent.OutputTuple,
      ProtocolParamsUpdatedEvent.OutputObject
    >;

    "PublicCIDUpdated(string)": TypedContractEvent<
      PublicCIDUpdatedEvent.InputTuple,
      PublicCIDUpdatedEvent.OutputTuple,
      PublicCIDUpdatedEvent.OutputObject
    >;
    PublicCIDUpdated: TypedContractEvent<
      PublicCIDUpdatedEvent.InputTuple,
      PublicCIDUpdatedEvent.OutputTuple,
      PublicCIDUpdatedEvent.OutputObject
    >;

    "VaultAdded(address)": TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;
    VaultAdded: TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;

    "VaultRemoved(address)": TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;
    VaultRemoved: TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;
  };
}
