/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OrionVaultFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allOrionVaults"
      | "config"
      | "createOrionVault"
      | "deployer"
      | "getAllOrionVaults"
      | "internalStateOrchestrator"
      | "isOrionVault"
      | "liquidityOrchestrator"
      | "underlyingAsset"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OrionVaultCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allOrionVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createOrionVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllOrionVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "internalStateOrchestrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOrionVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityOrchestrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allOrionVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrionVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOrionVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalStateOrchestrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrionVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityOrchestrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;
}

export namespace OrionVaultCreatedEvent {
  export type InputTuple = [
    vault: AddressLike,
    curator: AddressLike,
    deployer: AddressLike
  ];
  export type OutputTuple = [vault: string, curator: string, deployer: string];
  export interface OutputObject {
    vault: string;
    curator: string;
    deployer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrionVaultFactory extends BaseContract {
  connect(runner?: ContractRunner | null): OrionVaultFactory;
  waitForDeployment(): Promise<this>;

  interface: OrionVaultFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allOrionVaults: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  config: TypedContractMethod<[], [string], "view">;

  createOrionVault: TypedContractMethod<
    [curator: AddressLike],
    [string],
    "nonpayable"
  >;

  deployer: TypedContractMethod<[], [string], "view">;

  getAllOrionVaults: TypedContractMethod<[], [string[]], "view">;

  internalStateOrchestrator: TypedContractMethod<[], [string], "view">;

  isOrionVault: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  liquidityOrchestrator: TypedContractMethod<[], [string], "view">;

  underlyingAsset: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allOrionVaults"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createOrionVault"
  ): TypedContractMethod<[curator: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "deployer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllOrionVaults"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "internalStateOrchestrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isOrionVault"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityOrchestrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "underlyingAsset"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OrionVaultCreated"
  ): TypedContractEvent<
    OrionVaultCreatedEvent.InputTuple,
    OrionVaultCreatedEvent.OutputTuple,
    OrionVaultCreatedEvent.OutputObject
  >;

  filters: {
    "OrionVaultCreated(address,address,address)": TypedContractEvent<
      OrionVaultCreatedEvent.InputTuple,
      OrionVaultCreatedEvent.OutputTuple,
      OrionVaultCreatedEvent.OutputObject
    >;
    OrionVaultCreated: TypedContractEvent<
      OrionVaultCreatedEvent.InputTuple,
      OrionVaultCreatedEvent.OutputTuple,
      OrionVaultCreatedEvent.OutputObject
    >;
  };
}
